Microsoft (R) Macro Assembler Version 14.26.28805.0	    12/17/21 14:55:53
main.asm						     Page 1 - 1


				.386
				.MODEL FLAT,STDCALL

				EXTRN  GetStdHandle@4:NEAR
				EXTRN  WriteConsoleA@20:NEAR
				EXTRN  CharToOemA@8:NEAR
				EXTRN  ReadConsoleA@20:NEAR
				EXTRN  ExitProcess@4:NEAR
				EXTRN  lstrlenA@4:NEAR

				RMVSYMB MACRO SOURCE, SYM, COUNT
					MOV COUNT, 0
					MOV ESI, SOURCE
					MOV BL, [ESI]
					.WHILE BL != 0
						.IF BL == SYM
							PUSH ESI
							.WHILE BL != 0
								MOV EDI,ESI
								INC ESI
								MOV AL,[ESI]
								MOV [EDI],AL
								MOV BL, [ESI]
							.ENDW
							POP ESI
							DEC ESI
							INC COUNT
						.ENDIF
						INC ESI
						MOV BL, [ESI]
					.ENDW
				ENDM

 00000000			.DATA
 00000000 00000000		DOUT DD ? ; дескриптор вывода
 00000004 00000000		DIN DD ? ; дескриптор ввода
 00000008 00000000		LENS DD ? ; длина строки
 0000000C  000003E8 [		BUF  DB 1000 DUP (?) ; текст
	    00
	   ]
 000003F4 00			BUF2 DB ? ; символ
 000003F5 00000000		IBUF DD ? ; адрес на текущего места в тексте
 000003F9 00000000		LENALL DD ? ; длина текста
 000003FD C2 E2 E5 E4 E8	STR1 DB "Введите символ: ",13,10,0
	   F2 E5 20 F1 E8
	   EC E2 EE EB 3A
	   20 0D 0A 00
 00000410 C2 E2 E5 E4 E8	STR2 DB "Введите текст: ",13,10,0
	   F2 E5 20 F2 E5
	   EA F1 F2 3A 20
	   0D 0A 00
 00000422 D0 E5 E7 F3 EB	STR3 DB "Результат: ",13,10,0
	   FC F2 E0 F2 3A
	   20 0D 0A 00

 00000000			.CODE
 00000000			START:
				; Перекодируем строки
 00000000  68 000003FD R	PUSH OFFSET STR1
 00000005  68 000003FD R	PUSH OFFSET STR1
 0000000A  E8 00000000 E	CALL CharToOemA@8
 0000000F  68 00000410 R	PUSH OFFSET STR2
 00000014  68 00000410 R	PUSH OFFSET STR2
 00000019  E8 00000000 E	CALL CharToOemA@8
 0000001E  68 00000422 R	PUSH OFFSET STR3
 00000023  68 00000422 R	PUSH OFFSET STR3
 00000028  E8 00000000 E	CALL CharToOemA@8
				; Получим дескриптор ввода
 0000002D  6A F6		PUSH -10
 0000002F  E8 00000000 E	CALL GetStdHandle@4
 00000034  A3 00000004 R	MOV DIN, EAX
				; Получим дескриптор вывода
 00000039  6A F5		PUSH -11
 0000003B  E8 00000000 E	CALL GetStdHandle@4
 00000040  A3 00000000 R	MOV DOUT, EAX
				; Вывод строки
 00000045  68 000003FD R	PUSH OFFSET STR1
 0000004A  E8 00000000 E	CALL lstrlenA@4
 0000004F  6A 00		PUSH 0
 00000051  68 00000008 R	PUSH OFFSET LENS
 00000056  50			PUSH EAX
 00000057  68 000003FD R	PUSH OFFSET STR1
 0000005C  FF 35 00000000 R	PUSH DOUT
 00000062  E8 00000000 E	CALL  WriteConsoleA@20
				; Ввод символа
 00000067  6A 00		PUSH 0
 00000069  68 00000008 R	PUSH OFFSET LENS
 0000006E  68 000000C8		PUSH 200
 00000073  68 000003F4 R	PUSH OFFSET BUF2
 00000078  FF 35 00000004 R	PUSH DIN
 0000007E  E8 00000000 E	CALL ReadConsoleA@20
				; Инициализация переменных
 00000083  C7 05 000003F9 R	MOV LENALL,0
	   00000000
 0000008D  C7 05 000003F5 R	MOV IBUF, OFFSET BUF
	   0000000C R
				; Вывод строки
 00000097  68 00000410 R	PUSH OFFSET STR2
 0000009C  E8 00000000 E	CALL lstrlenA@4
 000000A1  6A 00		PUSH 0
 000000A3  68 00000008 R	PUSH OFFSET LENS
 000000A8  50			PUSH EAX
 000000A9  68 00000410 R	PUSH OFFSET STR2
 000000AE  FF 35 00000000 R	PUSH DOUT
 000000B4  E8 00000000 E	CALL  WriteConsoleA@20
				; Цикл ввода текста
 000000B9			READ_NEXT:
				; Ввод строки
 000000B9  6A 00		PUSH 0
 000000BB  68 00000008 R	PUSH OFFSET LENS
 000000C0  68 000000C8		PUSH 200
 000000C5  FF 35 000003F5 R	PUSH IBUF
 000000CB  FF 35 00000004 R	PUSH DIN
 000000D1  E8 00000000 E	CALL ReadConsoleA@20 
				; Проверка окончания ввода
 000000D6  8B 35 000003F5 R	MOV ESI,IBUF
 000000DC  8A 1E		MOV BL, [ESI]
 000000DE  B0 0D		MOV AL, 13 ;101
				.IF BL == AL
 000000E4  EB 5B			JMP EOF_FIND
				.ENDIF
				; Удаление символов
				RMVSYMB IBUF, BUF2, ECX
 000000E6  B9 00000000	     1		MOV ECX, 0
 000000EB  8B 35 000003F5 R  1		MOV ESI, IBUF
 000000F1  8A 1E	     1		MOV BL, [ESI]
 000000FD  56		     1				PUSH ESI
 00000100  8B FE	     1					MOV EDI,ESI
 00000102  46		     1					INC ESI
 00000103  8A 06	     1					MOV AL,[ESI]
 00000105  88 07	     1					MOV [EDI],AL
 00000107  8A 1E	     1					MOV BL, [ESI]
 0000010D  5E		     1				POP ESI
 0000010E  4E		     1				DEC ESI
 0000010F  41		     1				INC ECX
 00000110  46		     1			INC ESI
 00000111  8A 1E	     1			MOV BL, [ESI]
 00000117  A1 000003F5 R	MOV EAX,IBUF
 0000011C  8B 1D 00000008 R	MOV EBX,LENS
 00000122  2B D9		SUB EBX,ECX
				.IF EBX > 2
 00000129  03 C3			ADD EAX,EBX
 0000012B  A3 000003F5 R		MOV IBUF,EAX
 00000130  A1 000003F9 R		MOV EAX,LENALL
 00000135  03 C3			ADD EAX,EBX
 00000137  A3 000003F9 R		MOV LENALL,EAX
				.ENDIF
				; Повтор цикла
 0000013C  E9 FFFFFF78		JMP READ_NEXT
				; Выход из цикла
 00000141			EOF_FIND:
				; Вывод строки
 00000141  68 00000422 R	PUSH OFFSET STR3
 00000146  E8 00000000 E	CALL lstrlenA@4
 0000014B  6A 00		PUSH 0
 0000014D  68 00000008 R	PUSH OFFSET LENS
 00000152  50			PUSH EAX
 00000153  68 00000422 R	PUSH OFFSET STR3
 00000158  FF 35 00000000 R	PUSH DOUT
 0000015E  E8 00000000 E	CALL  WriteConsoleA@20
				; Выводим результат
 00000163  6A 00		PUSH 0
 00000165  68 000003F9 R	PUSH OFFSET LENALL
 0000016A  FF 35 000003F9 R	PUSH LENALL
 00000170  68 0000000C R	PUSH OFFSET BUF
 00000175  FF 35 00000000 R	PUSH DOUT
 0000017B  E8 00000000 E	CALL  WriteConsoleA@20
				; Небольшая задержка
 00000180  B9 AFFFFFFF		MOV ECX, 0AFFFFFFFH
 00000185  E2 FE		L1: LOOP L1
				; Выход из программы 
 00000187  6A 00		PUSH 0
 00000189  E8 00000000 E	CALL ExitProcess@4
				END START
Microsoft (R) Macro Assembler Version 14.26.28805.0	    12/17/21 14:55:53
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

RMVSYMB  . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000430 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000018E DWord	  Public  'CODE'	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
BUF2 . . . . . . . . . . . . . .	Byte	 000003F4 _DATA	
BUF  . . . . . . . . . . . . . .	Byte	 0000000C _DATA	
CharToOemA@8 . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
DIN  . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
DOUT . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
EOF_FIND . . . . . . . . . . . .	L Near	 00000141 _TEXT	
ExitProcess@4  . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
GetStdHandle@4 . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
IBUF . . . . . . . . . . . . . .	DWord	 000003F5 _DATA	
L1 . . . . . . . . . . . . . . .	L Near	 00000185 _TEXT	
LENALL . . . . . . . . . . . . .	DWord	 000003F9 _DATA	
LENS . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
READ_NEXT  . . . . . . . . . . .	L Near	 000000B9 _TEXT	
ReadConsoleA@20  . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
START  . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public STDCALL
STR1 . . . . . . . . . . . . . .	Byte	 000003FD _DATA	
STR2 . . . . . . . . . . . . . .	Byte	 00000410 _DATA	
STR3 . . . . . . . . . . . . . .	Byte	 00000422 _DATA	
WriteConsoleA@20 . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
lstrlenA@4 . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL

	   0 Warnings
	   0 Errors
